#!/bin/bash

###############################################################################

scriptName="NAME OF THE SCRIPT"

scriptAuthor="NAME OF THE AUTHOR"

scriptVersion="VERSION-NUMBER"

scriptDate="DATE OF LAST CHANGE"

scriptUrl="PROJECT'S OR AUTHOR'S URL"

scriptLicense="LICENSE IF ANY"

scriptDescription=$(cat <<EOT
A SHORT DESCRIPTION OF THE SCRIPT
EOT
)

scriptgeneralizedCommand=$(cat <<EOT
GENERALIZED VERSION OF THE COMMAND LINE WITHOUT SCRIPT NAME
EXAMPLE:
--of=OUTFILE sf=SEARCHFOLDER [OPTIONAL PARAMETERS] RES1 RES2 [RES3 [...]]
EOT
)

scriptExampleCommand=$(cat <<EOT
EXAMPLE VERSION OF THE COMMAND LINE WITHOUT SCRIPT NAME
EXAMPLE:
--of=bg.png --sf=Pictures/OrderedWallpapers 1920x1200 1280x1024
EOT
)

scriptObligatoryParameters=$(cat <<EOT
LIST OF ALL PARAMETERS THAT MUST BE PROVIDED.
EXAMPLE:
 --of=         The out-file, meaning the file to write the to. This file will be 
               overwritten without notice.
 --sf=         The folder to search for files.
EOT
)

scriptOptionalParameters=$(cat <<EOT
LIST OF ALL PARAMETERS THAT MAY BUT DO NOT HAVE TO BE PROVIDED.
SEE \$scriptObligatoryParameters ABOVE
EOT
)

scriptExitCodesList=$(cat <<EOT
LIST OF MEANINGS THAT POSSIBLE EXIT CODES OF THE SCRIPT HAVE
EXAMPLE:
  0 - Everything is fine
  1 - Wrong parameters
  2 - Unknown parameters
 23 - I am watching you.
 42 - Please state the question.
 99 - The requested feature is not (yet) implemented
EOT
)

scriptRequiredPrograms=( "prg1" "prg2" "prg3" )


###############################################################################



############################### Begin Functions ###############################
# Functions have to be 'declared' prior to using them

# General help that is shown whenever the script cannot be run because the user
# did not provide sufficient parameters
function showHelp {
    echo ""
    echo " $scriptName v$scriptVersion - $scriptDate"
    echo "     License: $scriptLicense"
    echo "     Author:  $scriptAuthor"
    echo "     see $scriptUrl"
    echo ""
    echo ""
    echo "   \"$cmd $scriptgeneralizedCommand\""
    echo ""
    echo "$scriptDescription"
    echo ""
    echo "Obligatory parameters:"
    echo "$scriptObligatoryParameters"
    echo ""
    echo "Optional parameters:"
    echo "$scriptOptionalParameters"
    echo ""
    echo "Example: "
    echo "   \"$cmd $scriptExampleCommand\""
    echo ""
    echo "Exit-Codes:"
    echo "$scriptExitCodesList"
    echo ""
    
}

# Used to output certain information only in verbose-mode
function echoIfVerbose {
    if [[ $verbose -eq 1 ]]; then
        echo "$@"
    fi
}

################################ End Functions ################################


########################## Begin Prerequisites Check ##########################

# Name of the Script file - still correct if file was renamed
cmd=$(basename "$0")


# Add the script's folder to the path. Useful if other programs in the same path
# might be needed and all scripts are in a user defined folder.
PATH=$PATH:$(dirname "$0")


# Check for required programs before starting 
requiredOk=1
for prg in "${scriptRequiredPrograms[@]}"; do
    path=$(which "$prg")
    if [[ "" == "$path" ]]; then
        requiredOk=0
        echo "ERROR: Required program '$prg' not found" >&2
    fi
done

if [[ $requiredOk -eq 0 ]]; then
    echo "       Please provide those programs in order to use this script" >&2
    exit 2
fi

########################### End Prerequisites Check ###########################


############################ Begin Parameter Check ############################

# Initializing needed variables. These are usually the default values for all
# parameters that are not obligatory.
exitStatus=0
verbose=0

# Analyze parameters
for param in "$@"; do
    knownParam=0

    #### Always set $knownParam to 1 when a parameter is found


    #### Example: parameter is "--of=" + the value.
    #### since "--of=" is 5 characters long, we check for the first 5 characters
    #### and if it is found use the rest of the parameter as value
    #
    # if [[ "${param:0:5}" == "--of=" ]]; then
    #     knownParam=1
    #     outFile="${param:5}"
    # fi

    #### Example: This Parameter is an image resolution, this can be found by
    #### matching the parameter.
    #
    # if [[ "${param:0:2}" != "--" ]]; then
    #     knownParam=1
    #     match=$(expr match "$param" '\([0-9]*x[0-9]*\)')
    #     if [[ "$match" != "$param" ]]; then
    #         echo "ERROR: RES-pramatemer format must be WIDTHxHEIGHT (e.g. '1024x768'): '$param'" >&2
    #         exitStatus=6
    #     fi
    #     
    #     resolutions[${#resolutions[*]}]=$param
    # fi


    #### Example of a simple parameter without value
    #
    # if [[ "${param:0:9}" == "--verbose" ]]; then
    #     knownParam=1
    #     verbose=1
    # fi



    # Check for unknown parameters
    # Has to be at the end of this loop
    if [[ $knownParam -eq 0 ]]; then
        echo "ERROR: Unknown Parameter '$param'" >&2
        exitStatus=2
    fi
done

############################# End Parameter Check #############################


############################## Begin Values Check #############################


#### Example of checking for a value
#
# if [[ "$outFile" == "" ]]; then
#     echo "ERROR: Obligatory Parameters not given" >&2
#     echo "       Please provide an out-file (--of) parameters" >&2
#     exitStatus=1
# fi

#### Example of checking for more than one value
#
# if [[ ${#resolutions[@]} -lt 2 ]]; then
#     echo "ERROR: Not enough RES-parameters given" >&2
#     echo "       Please provide at least two image resolutions" >&2
#     exitStatus=3
# fi



if [[ $exitStatus -ne 0 ]]; then
    ## Code for debugging parameters
    #echo "Parameters received:"
    #x=0
    #while [[ "$1" != "" ]]; do
    #   let "x = $x + 1"
    #   echo "$x: $1"
    #   shift
    #done

    showHelp
    exit $exitStatus
fi

############################### End Values Check ##############################

############################# Begin Actual Script #############################





############################## End Actual Script ##############################



#### Useful code examples:

# # $IFS must be set to newline so a space is not interpreted as separator for
# # the files returned by the find-command
# IFS=$'\n' 




